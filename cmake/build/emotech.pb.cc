// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emotech.proto

#include "emotech.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace emotech {
constexpr IntRequest::IntRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : number_(0){}
struct IntRequestDefaultTypeInternal {
  constexpr IntRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntRequestDefaultTypeInternal() {}
  union {
    IntRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntRequestDefaultTypeInternal _IntRequest_default_instance_;
constexpr IntResponse::IntResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : number_(0){}
struct IntResponseDefaultTypeInternal {
  constexpr IntResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntResponseDefaultTypeInternal() {}
  union {
    IntResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntResponseDefaultTypeInternal _IntResponse_default_instance_;
constexpr StringRequest::StringRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requesttext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StringRequestDefaultTypeInternal {
  constexpr StringRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringRequestDefaultTypeInternal() {}
  union {
    StringRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringRequestDefaultTypeInternal _StringRequest_default_instance_;
constexpr StringResponse::StringResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : responsetext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct StringResponseDefaultTypeInternal {
  constexpr StringResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StringResponseDefaultTypeInternal() {}
  union {
    StringResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StringResponseDefaultTypeInternal _StringResponse_default_instance_;
constexpr ChunkRequest::ChunkRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChunkRequestDefaultTypeInternal {
  constexpr ChunkRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkRequestDefaultTypeInternal() {}
  union {
    ChunkRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkRequestDefaultTypeInternal _ChunkRequest_default_instance_;
constexpr ChunkResponse::ChunkResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChunkResponseDefaultTypeInternal {
  constexpr ChunkResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkResponseDefaultTypeInternal() {}
  union {
    ChunkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkResponseDefaultTypeInternal _ChunkResponse_default_instance_;
}  // namespace emotech
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_emotech_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_emotech_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_emotech_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_emotech_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::emotech::IntRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::emotech::IntRequest, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::emotech::IntResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::emotech::IntResponse, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::emotech::StringRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::emotech::StringRequest, requesttext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::emotech::StringResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::emotech::StringResponse, responsetext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::emotech::ChunkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::emotech::ChunkRequest, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::emotech::ChunkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::emotech::ChunkResponse, response_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::emotech::IntRequest)},
  { 6, -1, sizeof(::emotech::IntResponse)},
  { 12, -1, sizeof(::emotech::StringRequest)},
  { 18, -1, sizeof(::emotech::StringResponse)},
  { 24, -1, sizeof(::emotech::ChunkRequest)},
  { 30, -1, sizeof(::emotech::ChunkResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::emotech::_IntRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::emotech::_IntResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::emotech::_StringRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::emotech::_StringResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::emotech::_ChunkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::emotech::_ChunkResponse_default_instance_),
};

const char descriptor_table_protodef_emotech_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\remotech.proto\022\007emotech\"\034\n\nIntRequest\022\016"
  "\n\006number\030\001 \001(\005\"\035\n\013IntResponse\022\016\n\006number\030"
  "\001 \001(\005\"$\n\rStringRequest\022\023\n\013requestText\030\001 "
  "\001(\t\"&\n\016StringResponse\022\024\n\014responseText\030\001 "
  "\001(\t\"\037\n\014ChunkRequest\022\017\n\007content\030\002 \001(\014\"!\n\r"
  "ChunkResponse\022\020\n\010response\030\001 \001(\t2\327\001\n\016Emot"
  "echService\022=\n\016exchangeNumber\022\023.emotech.I"
  "ntRequest\032\024.emotech.IntResponse\"\000\022C\n\016exc"
  "hangeString\022\026.emotech.StringRequest\032\027.em"
  "otech.StringResponse\"\000\022A\n\014exchangeFile\022\025"
  ".emotech.ChunkRequest\032\026.emotech.ChunkRes"
  "ponse\"\000(\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_emotech_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_emotech_2eproto = {
  false, false, 457, descriptor_table_protodef_emotech_2eproto, "emotech.proto", 
  &descriptor_table_emotech_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_emotech_2eproto::offsets,
  file_level_metadata_emotech_2eproto, file_level_enum_descriptors_emotech_2eproto, file_level_service_descriptors_emotech_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_emotech_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_emotech_2eproto);
  return descriptor_table_emotech_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_emotech_2eproto(&descriptor_table_emotech_2eproto);
namespace emotech {

// ===================================================================

class IntRequest::_Internal {
 public:
};

IntRequest::IntRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:emotech.IntRequest)
}
IntRequest::IntRequest(const IntRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:emotech.IntRequest)
}

void IntRequest::SharedCtor() {
number_ = 0;
}

IntRequest::~IntRequest() {
  // @@protoc_insertion_point(destructor:emotech.IntRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntRequest::ArenaDtor(void* object) {
  IntRequest* _this = reinterpret_cast< IntRequest* >(object);
  (void)_this;
}
void IntRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:emotech.IntRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:emotech.IntRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:emotech.IntRequest)
  return target;
}

size_t IntRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emotech.IntRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emotech.IntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IntRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emotech.IntRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emotech.IntRequest)
    MergeFrom(*source);
  }
}

void IntRequest::MergeFrom(const IntRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emotech.IntRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void IntRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emotech.IntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntRequest::CopyFrom(const IntRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emotech.IntRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntRequest::IsInitialized() const {
  return true;
}

void IntRequest::InternalSwap(IntRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IntResponse::_Internal {
 public:
};

IntResponse::IntResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:emotech.IntResponse)
}
IntResponse::IntResponse(const IntResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:emotech.IntResponse)
}

void IntResponse::SharedCtor() {
number_ = 0;
}

IntResponse::~IntResponse() {
  // @@protoc_insertion_point(destructor:emotech.IntResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IntResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IntResponse::ArenaDtor(void* object) {
  IntResponse* _this = reinterpret_cast< IntResponse* >(object);
  (void)_this;
}
void IntResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:emotech.IntResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:emotech.IntResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:emotech.IntResponse)
  return target;
}

size_t IntResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emotech.IntResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 number = 1;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emotech.IntResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IntResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IntResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emotech.IntResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emotech.IntResponse)
    MergeFrom(*source);
  }
}

void IntResponse::MergeFrom(const IntResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emotech.IntResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number() != 0) {
    _internal_set_number(from._internal_number());
  }
}

void IntResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emotech.IntResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntResponse::CopyFrom(const IntResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emotech.IntResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntResponse::IsInitialized() const {
  return true;
}

void IntResponse::InternalSwap(IntResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IntResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StringRequest::_Internal {
 public:
};

StringRequest::StringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:emotech.StringRequest)
}
StringRequest::StringRequest(const StringRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requesttext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_requesttext().empty()) {
    requesttext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_requesttext(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:emotech.StringRequest)
}

void StringRequest::SharedCtor() {
requesttext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringRequest::~StringRequest() {
  // @@protoc_insertion_point(destructor:emotech.StringRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  requesttext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringRequest::ArenaDtor(void* object) {
  StringRequest* _this = reinterpret_cast< StringRequest* >(object);
  (void)_this;
}
void StringRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:emotech.StringRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requesttext_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string requestText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_requesttext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "emotech.StringRequest.requestText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:emotech.StringRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string requestText = 1;
  if (this->requesttext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_requesttext().data(), static_cast<int>(this->_internal_requesttext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "emotech.StringRequest.requestText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_requesttext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:emotech.StringRequest)
  return target;
}

size_t StringRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emotech.StringRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string requestText = 1;
  if (this->requesttext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_requesttext());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emotech.StringRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StringRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emotech.StringRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emotech.StringRequest)
    MergeFrom(*source);
  }
}

void StringRequest::MergeFrom(const StringRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emotech.StringRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.requesttext().size() > 0) {
    _internal_set_requesttext(from._internal_requesttext());
  }
}

void StringRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emotech.StringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringRequest::CopyFrom(const StringRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emotech.StringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringRequest::IsInitialized() const {
  return true;
}

void StringRequest::InternalSwap(StringRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  requesttext_.Swap(&other->requesttext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StringResponse::_Internal {
 public:
};

StringResponse::StringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:emotech.StringResponse)
}
StringResponse::StringResponse(const StringResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  responsetext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_responsetext().empty()) {
    responsetext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_responsetext(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:emotech.StringResponse)
}

void StringResponse::SharedCtor() {
responsetext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StringResponse::~StringResponse() {
  // @@protoc_insertion_point(destructor:emotech.StringResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StringResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  responsetext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StringResponse::ArenaDtor(void* object) {
  StringResponse* _this = reinterpret_cast< StringResponse* >(object);
  (void)_this;
}
void StringResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StringResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:emotech.StringResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  responsetext_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string responseText = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_responsetext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "emotech.StringResponse.responseText"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:emotech.StringResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string responseText = 1;
  if (this->responsetext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_responsetext().data(), static_cast<int>(this->_internal_responsetext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "emotech.StringResponse.responseText");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_responsetext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:emotech.StringResponse)
  return target;
}

size_t StringResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emotech.StringResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string responseText = 1;
  if (this->responsetext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_responsetext());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emotech.StringResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StringResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emotech.StringResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emotech.StringResponse)
    MergeFrom(*source);
  }
}

void StringResponse::MergeFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emotech.StringResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.responsetext().size() > 0) {
    _internal_set_responsetext(from._internal_responsetext());
  }
}

void StringResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emotech.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringResponse::CopyFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emotech.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringResponse::IsInitialized() const {
  return true;
}

void StringResponse::InternalSwap(StringResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  responsetext_.Swap(&other->responsetext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata StringResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChunkRequest::_Internal {
 public:
};

ChunkRequest::ChunkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:emotech.ChunkRequest)
}
ChunkRequest::ChunkRequest(const ChunkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:emotech.ChunkRequest)
}

void ChunkRequest::SharedCtor() {
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChunkRequest::~ChunkRequest() {
  // @@protoc_insertion_point(destructor:emotech.ChunkRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChunkRequest::ArenaDtor(void* object) {
  ChunkRequest* _this = reinterpret_cast< ChunkRequest* >(object);
  (void)_this;
}
void ChunkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChunkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:emotech.ChunkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:emotech.ChunkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 2;
  if (this->content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:emotech.ChunkRequest)
  return target;
}

size_t ChunkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emotech.ChunkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emotech.ChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emotech.ChunkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emotech.ChunkRequest)
    MergeFrom(*source);
  }
}

void ChunkRequest::MergeFrom(const ChunkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emotech.ChunkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {
    _internal_set_content(from._internal_content());
  }
}

void ChunkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emotech.ChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkRequest::CopyFrom(const ChunkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emotech.ChunkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkRequest::IsInitialized() const {
  return true;
}

void ChunkRequest::InternalSwap(ChunkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChunkResponse::_Internal {
 public:
};

ChunkResponse::ChunkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:emotech.ChunkResponse)
}
ChunkResponse::ChunkResponse(const ChunkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response().empty()) {
    response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:emotech.ChunkResponse)
}

void ChunkResponse::SharedCtor() {
response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChunkResponse::~ChunkResponse() {
  // @@protoc_insertion_point(destructor:emotech.ChunkResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChunkResponse::ArenaDtor(void* object) {
  ChunkResponse* _this = reinterpret_cast< ChunkResponse* >(object);
  (void)_this;
}
void ChunkResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChunkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:emotech.ChunkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "emotech.ChunkResponse.response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:emotech.ChunkResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response().data(), static_cast<int>(this->_internal_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "emotech.ChunkResponse.response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:emotech.ChunkResponse)
  return target;
}

size_t ChunkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:emotech.ChunkResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response = 1;
  if (this->response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:emotech.ChunkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:emotech.ChunkResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:emotech.ChunkResponse)
    MergeFrom(*source);
  }
}

void ChunkResponse::MergeFrom(const ChunkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:emotech.ChunkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response().size() > 0) {
    _internal_set_response(from._internal_response());
  }
}

void ChunkResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:emotech.ChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkResponse::CopyFrom(const ChunkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:emotech.ChunkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkResponse::IsInitialized() const {
  return true;
}

void ChunkResponse::InternalSwap(ChunkResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  response_.Swap(&other->response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace emotech
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::emotech::IntRequest* Arena::CreateMaybeMessage< ::emotech::IntRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::emotech::IntRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::emotech::IntResponse* Arena::CreateMaybeMessage< ::emotech::IntResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::emotech::IntResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::emotech::StringRequest* Arena::CreateMaybeMessage< ::emotech::StringRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::emotech::StringRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::emotech::StringResponse* Arena::CreateMaybeMessage< ::emotech::StringResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::emotech::StringResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::emotech::ChunkRequest* Arena::CreateMaybeMessage< ::emotech::ChunkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::emotech::ChunkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::emotech::ChunkResponse* Arena::CreateMaybeMessage< ::emotech::ChunkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::emotech::ChunkResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

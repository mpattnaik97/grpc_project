// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: emotech.proto

#include "emotech.pb.h"
#include "emotech.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace emotech {

static const char* EmotechService_method_names[] = {
  "/emotech.EmotechService/exchangeNumber",
  "/emotech.EmotechService/exchangeString",
  "/emotech.EmotechService/exchangeFile",
};

std::unique_ptr< EmotechService::Stub> EmotechService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EmotechService::Stub> stub(new EmotechService::Stub(channel));
  return stub;
}

EmotechService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_exchangeNumber_(EmotechService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exchangeString_(EmotechService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_exchangeFile_(EmotechService_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status EmotechService::Stub::exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::emotech::IntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::emotech::IntRequest, ::emotech::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exchangeNumber_, context, request, response);
}

void EmotechService::Stub::experimental_async::exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::emotech::IntRequest, ::emotech::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exchangeNumber_, context, request, response, std::move(f));
}

void EmotechService::Stub::experimental_async::exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exchangeNumber_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::emotech::IntResponse>* EmotechService::Stub::PrepareAsyncexchangeNumberRaw(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::emotech::IntResponse, ::emotech::IntRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exchangeNumber_, context, request);
}

::grpc::ClientAsyncResponseReader< ::emotech::IntResponse>* EmotechService::Stub::AsyncexchangeNumberRaw(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexchangeNumberRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EmotechService::Stub::exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::emotech::StringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::emotech::StringRequest, ::emotech::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_exchangeString_, context, request, response);
}

void EmotechService::Stub::experimental_async::exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::emotech::StringRequest, ::emotech::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exchangeString_, context, request, response, std::move(f));
}

void EmotechService::Stub::experimental_async::exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_exchangeString_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::emotech::StringResponse>* EmotechService::Stub::PrepareAsyncexchangeStringRaw(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::emotech::StringResponse, ::emotech::StringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_exchangeString_, context, request);
}

::grpc::ClientAsyncResponseReader< ::emotech::StringResponse>* EmotechService::Stub::AsyncexchangeStringRaw(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncexchangeStringRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::emotech::ChunkRequest>* EmotechService::Stub::exchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::emotech::ChunkRequest>::Create(channel_.get(), rpcmethod_exchangeFile_, context, response);
}

void EmotechService::Stub::experimental_async::exchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::experimental::ClientWriteReactor< ::emotech::ChunkRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::emotech::ChunkRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_exchangeFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::emotech::ChunkRequest>* EmotechService::Stub::AsyncexchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::emotech::ChunkRequest>::Create(channel_.get(), cq, rpcmethod_exchangeFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::emotech::ChunkRequest>* EmotechService::Stub::PrepareAsyncexchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::emotech::ChunkRequest>::Create(channel_.get(), cq, rpcmethod_exchangeFile_, context, response, false, nullptr);
}

EmotechService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmotechService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmotechService::Service, ::emotech::IntRequest, ::emotech::IntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmotechService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::emotech::IntRequest* req,
             ::emotech::IntResponse* resp) {
               return service->exchangeNumber(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmotechService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EmotechService::Service, ::emotech::StringRequest, ::emotech::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EmotechService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::emotech::StringRequest* req,
             ::emotech::StringResponse* resp) {
               return service->exchangeString(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EmotechService_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< EmotechService::Service, ::emotech::ChunkRequest, ::emotech::ChunkResponse>(
          [](EmotechService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::emotech::ChunkRequest>* reader,
             ::emotech::ChunkResponse* resp) {
               return service->exchangeFile(ctx, reader, resp);
             }, this)));
}

EmotechService::Service::~Service() {
}

::grpc::Status EmotechService::Service::exchangeNumber(::grpc::ServerContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmotechService::Service::exchangeString(::grpc::ServerContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EmotechService::Service::exchangeFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::emotech::ChunkRequest>* reader, ::emotech::ChunkResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace emotech


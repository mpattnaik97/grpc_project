// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: emotech.proto
#ifndef GRPC_emotech_2eproto__INCLUDED
#define GRPC_emotech_2eproto__INCLUDED

#include "emotech.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace emotech {

class EmotechService final {
 public:
  static constexpr char const* service_full_name() {
    return "emotech.EmotechService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::emotech::IntResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emotech::IntResponse>> AsyncexchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emotech::IntResponse>>(AsyncexchangeNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emotech::IntResponse>> PrepareAsyncexchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emotech::IntResponse>>(PrepareAsyncexchangeNumberRaw(context, request, cq));
    }
    virtual ::grpc::Status exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::emotech::StringResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emotech::StringResponse>> AsyncexchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emotech::StringResponse>>(AsyncexchangeStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emotech::StringResponse>> PrepareAsyncexchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::emotech::StringResponse>>(PrepareAsyncexchangeStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::emotech::ChunkRequest>> exchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::emotech::ChunkRequest>>(exchangeFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::emotech::ChunkRequest>> AsyncexchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::emotech::ChunkRequest>>(AsyncexchangeFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::emotech::ChunkRequest>> PrepareAsyncexchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::emotech::ChunkRequest>>(PrepareAsyncexchangeFileRaw(context, response, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void exchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::ClientWriteReactor< ::emotech::ChunkRequest>* reactor) = 0;
      #else
      virtual void exchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::experimental::ClientWriteReactor< ::emotech::ChunkRequest>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emotech::IntResponse>* AsyncexchangeNumberRaw(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emotech::IntResponse>* PrepareAsyncexchangeNumberRaw(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emotech::StringResponse>* AsyncexchangeStringRaw(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::emotech::StringResponse>* PrepareAsyncexchangeStringRaw(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::emotech::ChunkRequest>* exchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::emotech::ChunkRequest>* AsyncexchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::emotech::ChunkRequest>* PrepareAsyncexchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::emotech::IntResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emotech::IntResponse>> AsyncexchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emotech::IntResponse>>(AsyncexchangeNumberRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emotech::IntResponse>> PrepareAsyncexchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emotech::IntResponse>>(PrepareAsyncexchangeNumberRaw(context, request, cq));
    }
    ::grpc::Status exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::emotech::StringResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emotech::StringResponse>> AsyncexchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emotech::StringResponse>>(AsyncexchangeStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emotech::StringResponse>> PrepareAsyncexchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::emotech::StringResponse>>(PrepareAsyncexchangeStringRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::emotech::ChunkRequest>> exchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::emotech::ChunkRequest>>(exchangeFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::emotech::ChunkRequest>> AsyncexchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::emotech::ChunkRequest>>(AsyncexchangeFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::emotech::ChunkRequest>> PrepareAsyncexchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::emotech::ChunkRequest>>(PrepareAsyncexchangeFileRaw(context, response, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void exchangeNumber(::grpc::ClientContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void exchangeString(::grpc::ClientContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void exchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::ClientWriteReactor< ::emotech::ChunkRequest>* reactor) override;
      #else
      void exchangeFile(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::experimental::ClientWriteReactor< ::emotech::ChunkRequest>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::emotech::IntResponse>* AsyncexchangeNumberRaw(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emotech::IntResponse>* PrepareAsyncexchangeNumberRaw(::grpc::ClientContext* context, const ::emotech::IntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emotech::StringResponse>* AsyncexchangeStringRaw(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::emotech::StringResponse>* PrepareAsyncexchangeStringRaw(::grpc::ClientContext* context, const ::emotech::StringRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::emotech::ChunkRequest>* exchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response) override;
    ::grpc::ClientAsyncWriter< ::emotech::ChunkRequest>* AsyncexchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::emotech::ChunkRequest>* PrepareAsyncexchangeFileRaw(::grpc::ClientContext* context, ::emotech::ChunkResponse* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_exchangeNumber_;
    const ::grpc::internal::RpcMethod rpcmethod_exchangeString_;
    const ::grpc::internal::RpcMethod rpcmethod_exchangeFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status exchangeNumber(::grpc::ServerContext* context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response);
    virtual ::grpc::Status exchangeString(::grpc::ServerContext* context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response);
    virtual ::grpc::Status exchangeFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::emotech::ChunkRequest>* reader, ::emotech::ChunkResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_exchangeNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exchangeNumber() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_exchangeNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeNumber(::grpc::ServerContext* /*context*/, const ::emotech::IntRequest* /*request*/, ::emotech::IntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexchangeNumber(::grpc::ServerContext* context, ::emotech::IntRequest* request, ::grpc::ServerAsyncResponseWriter< ::emotech::IntResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exchangeString() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_exchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeString(::grpc::ServerContext* /*context*/, const ::emotech::StringRequest* /*request*/, ::emotech::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexchangeString(::grpc::ServerContext* context, ::emotech::StringRequest* request, ::grpc::ServerAsyncResponseWriter< ::emotech::StringResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_exchangeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_exchangeFile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_exchangeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::emotech::ChunkRequest>* /*reader*/, ::emotech::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexchangeFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::emotech::ChunkResponse, ::emotech::ChunkRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_exchangeNumber<WithAsyncMethod_exchangeString<WithAsyncMethod_exchangeFile<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_exchangeNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_exchangeNumber() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::emotech::IntRequest, ::emotech::IntResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::emotech::IntRequest* request, ::emotech::IntResponse* response) { return this->exchangeNumber(context, request, response); }));}
    void SetMessageAllocatorFor_exchangeNumber(
        ::grpc::experimental::MessageAllocator< ::emotech::IntRequest, ::emotech::IntResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::emotech::IntRequest, ::emotech::IntResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_exchangeNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeNumber(::grpc::ServerContext* /*context*/, const ::emotech::IntRequest* /*request*/, ::emotech::IntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* exchangeNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::emotech::IntRequest* /*request*/, ::emotech::IntResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* exchangeNumber(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::emotech::IntRequest* /*request*/, ::emotech::IntResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_exchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_exchangeString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::emotech::StringRequest, ::emotech::StringResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::emotech::StringRequest* request, ::emotech::StringResponse* response) { return this->exchangeString(context, request, response); }));}
    void SetMessageAllocatorFor_exchangeString(
        ::grpc::experimental::MessageAllocator< ::emotech::StringRequest, ::emotech::StringResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::emotech::StringRequest, ::emotech::StringResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_exchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeString(::grpc::ServerContext* /*context*/, const ::emotech::StringRequest* /*request*/, ::emotech::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* exchangeString(
      ::grpc::CallbackServerContext* /*context*/, const ::emotech::StringRequest* /*request*/, ::emotech::StringResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* exchangeString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::emotech::StringRequest* /*request*/, ::emotech::StringResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_exchangeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_exchangeFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::emotech::ChunkRequest, ::emotech::ChunkResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::emotech::ChunkResponse* response) { return this->exchangeFile(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_exchangeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::emotech::ChunkRequest>* /*reader*/, ::emotech::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::emotech::ChunkRequest>* exchangeFile(
      ::grpc::CallbackServerContext* /*context*/, ::emotech::ChunkResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::emotech::ChunkRequest>* exchangeFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::emotech::ChunkResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_exchangeNumber<ExperimentalWithCallbackMethod_exchangeString<ExperimentalWithCallbackMethod_exchangeFile<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_exchangeNumber<ExperimentalWithCallbackMethod_exchangeString<ExperimentalWithCallbackMethod_exchangeFile<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_exchangeNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exchangeNumber() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_exchangeNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeNumber(::grpc::ServerContext* /*context*/, const ::emotech::IntRequest* /*request*/, ::emotech::IntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exchangeString() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_exchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeString(::grpc::ServerContext* /*context*/, const ::emotech::StringRequest* /*request*/, ::emotech::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_exchangeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_exchangeFile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_exchangeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::emotech::ChunkRequest>* /*reader*/, ::emotech::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_exchangeNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exchangeNumber() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_exchangeNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeNumber(::grpc::ServerContext* /*context*/, const ::emotech::IntRequest* /*request*/, ::emotech::IntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexchangeNumber(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exchangeString() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_exchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeString(::grpc::ServerContext* /*context*/, const ::emotech::StringRequest* /*request*/, ::emotech::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexchangeString(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_exchangeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_exchangeFile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_exchangeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::emotech::ChunkRequest>* /*reader*/, ::emotech::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestexchangeFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_exchangeNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_exchangeNumber() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exchangeNumber(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_exchangeNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeNumber(::grpc::ServerContext* /*context*/, const ::emotech::IntRequest* /*request*/, ::emotech::IntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* exchangeNumber(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* exchangeNumber(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_exchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_exchangeString() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->exchangeString(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_exchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeString(::grpc::ServerContext* /*context*/, const ::emotech::StringRequest* /*request*/, ::emotech::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* exchangeString(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* exchangeString(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_exchangeFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_exchangeFile() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->exchangeFile(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_exchangeFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status exchangeFile(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::emotech::ChunkRequest>* /*reader*/, ::emotech::ChunkResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* exchangeFile(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* exchangeFile(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exchangeNumber : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exchangeNumber() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::emotech::IntRequest, ::emotech::IntResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::emotech::IntRequest, ::emotech::IntResponse>* streamer) {
                       return this->StreamedexchangeNumber(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exchangeNumber() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exchangeNumber(::grpc::ServerContext* /*context*/, const ::emotech::IntRequest* /*request*/, ::emotech::IntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexchangeNumber(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::emotech::IntRequest,::emotech::IntResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_exchangeString : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_exchangeString() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::emotech::StringRequest, ::emotech::StringResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::emotech::StringRequest, ::emotech::StringResponse>* streamer) {
                       return this->StreamedexchangeString(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_exchangeString() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status exchangeString(::grpc::ServerContext* /*context*/, const ::emotech::StringRequest* /*request*/, ::emotech::StringResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedexchangeString(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::emotech::StringRequest,::emotech::StringResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_exchangeNumber<WithStreamedUnaryMethod_exchangeString<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_exchangeNumber<WithStreamedUnaryMethod_exchangeString<Service > > StreamedService;
};

}  // namespace emotech


#endif  // GRPC_emotech_2eproto__INCLUDED
